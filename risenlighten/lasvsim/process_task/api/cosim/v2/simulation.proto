syntax = "proto3";

package risenlighten.lasvsim.process_task.api.cosim.v2;

option go_package = "git.risenlighten.com/lasvsim/process_task/api/cosim/v2;cosimv2";
//option java_multiple_files = true;
//option java_package = "git.risenlighten.lasvsim.process_task.api.cosim.v2";

import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "openapi/v3/annotations.proto";
import "validate/validate.proto";
import "risenlighten/lasvsim/process_task/api/cosim/v2/external_struct.proto";


service Simulation {
	// --------- 仿真器部分 ---------

	// 初始化新仿真器
	rpc Init(InitReq) returns (InitRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/init"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "初始化新仿真器"
		};
	};
	// 执行仿真
	rpc Step(StepReq) returns (StepRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/step"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "执行仿真步骤"
		};
	};
	// 停止仿真器
	rpc Stop(StopReq) returns (StopRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/stop"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "停止仿真"
		};
	};
	// 重置仿真器
	rpc Reset(ResetReq) returns (ResetRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/reset"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "重置当前仿真器, 根据scenario配置信息重置仿真"
		};
	};


	// --------- 地图部分 ---------

	//	根据junction id获取交通信号灯当前阶段信息
	rpc GetCurrentStage(GetCurrentStageReq) returns (GetCurrentStageRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/map/traffic_light/current_stage/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据junction id获取交通信号灯当前阶段信息"
		};
	};


	//	根据movement id获取流向对应信号灯灯色信息
	rpc GetMovementSignal(GetMovementSignalReq) returns (GetMovementSignalRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/map/traffic_light/phase_info/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据movement id获取流向对应信号灯灯色信息"
		};
	};

	// 根据junction id获取交通信号灯配时方案
	rpc GetSignalPlan(GetSignalPlanReq) returns (GetSignalPlanRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/map/traffic_light/signal_plan/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据junction id获取交通信号灯配时方案"
		};
	};

	// 根据junctionId获取对应movement列表
	rpc GetMovementList(GetMovementListReq) returns (GetMovementListRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/map/movement/list/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据junctionId获取对应movement列表"
		};
	};

	// (暂不支持)junction对应信号灯灯色切换到下个阶段
	rpc NextStage(NextStageReq) returns (NextStageRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/map/traffic_light/next_stage"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "junciton对应信号灯灯色切换到下个阶段"
		};
	};


	// --------- 车辆部分 ---------

	// 根据仿真ID获取所有车辆ID列表
	rpc	GetVehicleIdList(GetVehicleIdListReq) returns (GetVehicleIdListRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/id_list/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据仿真ID获取所有车辆ID列表"
		};
	};
	// 根据仿真ID获取测试车辆ID列表
	rpc	GetTestVehicleIdList(GetTestVehicleIdListReq) returns (GetTestVehicleIdListRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/test_vehicle/id_list/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据仿真ID获取测试车辆ID列表"
		};
	};
	// 根据车辆ID列表获取车辆基本信息
	rpc GetVehicleBaseInfo(GetVehicleBaseInfoReq) returns (GetVehicleBaseInfoRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/base_info/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID列表获取车辆基本信息"
		};
	};
	// 根据车辆ID列表获取车辆位置信息
	rpc GetVehiclePosition(GetVehiclePositionReq) returns (GetVehiclePositionRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/position/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID列表获取车辆位置信息"
		};
	};
	// 根据车辆ID列表获取车辆运动信息
	rpc	GetVehicleMovingInfo(GetVehicleMovingInfoReq) returns (GetVehicleMovingInfoRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/moving_info/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID列表获取车辆移动信息"
		};
	};
	// 根据车辆ID列表获取车辆控制参数信息
	rpc GetVehicleControlInfo(GetVehicleControlInfoReq) returns (GetVehicleControlInfoRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/control/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID列表获取车辆控制参数信息"
		};
	};
	// 根据车辆ID获取车辆感知信息
	rpc GetVehiclePerceptionInfo(GetVehiclePerceptionInfoReq) returns (GetVehiclePerceptionInfoRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/perception/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID获取车辆感知信息"
		};
	};
	// 获取车辆可选参考线
	rpc GetVehicleReferenceLines(GetVehicleReferenceLinesReq) returns (GetVehicleReferenceLinesRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/reference_line/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID获取车辆可选参考线"
		};
	};
	// 获取车辆规划路径
	rpc GetVehiclePlanningInfo(GetVehiclePlanningInfoReq) returns (GetVehiclePlanningInfoRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/planning/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID获取车辆规划路径"
		};
	};
	// 获取车辆导航信息,暂不支持route_nav以及lane_nav
	rpc GetVehicleNavigationInfo(GetVehicleNavigationInfoReq)returns(GetVehicleNavigationInfoRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/navigation/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID获取车辆导航信息"
		};
	};
	// 修改车辆规划路径
	rpc SetVehiclePlanningInfo(SetVehiclePlanningInfoReq) returns (SetVehiclePlanningInfoRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/planning/set"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID修改车辆规划路径"
		};
	};
	// 修改车辆控制参数(方向盘转角、纵向加速度)
	rpc SetVehicleControlInfo(SetVehicleControlInfoReq) returns (SetVehicleControlInfoRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/control/set"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID修改车辆控制参数(方向盘转角、纵向加速度)"
		};
	};
	// 修改车辆点位信息{x,y,z}, phi
	rpc SetVehiclePosition(SetVehiclePositionReq) returns (SetVehiclePositionRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/position/set"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID修改车辆点位信息Point{x,y,z}, 航向角phi"
		};
	};
	// 修改车辆运动信息
	rpc SetVehicleMovingInfo(SetVehicleMovingInfoReq) returns (SetVehicleMovingInfoRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/moving_info/set"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID修改车辆运动信息"
		};
	};
	// 修改车辆基础信息, 暂不支持动力学相关参数
	rpc SetVehicleBaseInfo(SetVehicleBaseInfoReq) returns (SetVehicleBaseInfoRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/base_info/set"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID修改车辆基础信息"
		};
	};
	// 修改车辆路段导航信息(暂不支持)
	rpc SetVehicleRouteNav(SetVehicleRouteNavReq)returns(SetVehicleRouteNavRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/route_nav/set"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID修改车辆路段导航信息"
		};
	}
	// 修改车辆子路段导航信息
	rpc SetVehicleLinkNav(SetVehicleLinkNavReq)returns(SetVehicleLinkNavRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/link_nav/set"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID修改车辆子路段导航信息"
		};
	}
	// 修改车辆车道导航信息(暂不支持)
	rpc SetVehicleLaneNav(SetVehicleLaneNavReq)returns(SetVehicleLaneNavRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/lane_nav/set"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID修改车辆车道导航信息"
		};
	}
	// 修改车辆终点
	rpc SetVehicleDestination(SetVehicleDestinationReq)returns(SetVehicleDestinationRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/vehicle/destination/set"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据车辆ID修改车辆终点"
		};
	}



	// --------- 行人部分 ---------

	// 获取行人ID列表
	rpc	GetPedIdList(GetPedIdListReq)returns(GetPedIdListRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/ped/id_list/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "获取行人ID列表"
		};
	};
	// 获取行人基础信息
	rpc GetPedBaseInfo(GetPedBaseInfoReq)returns(GetPedBaseInfoRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/ped/base_info/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据行人ID列表，获取行人基础信息"
		};
	};
	// 修改行人点位信息{x,y,z}, 航向角Phi
	rpc SetPedPosition(SetPedPositionReq) returns (SetPedPositionRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/ped/position/set"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据行人ID，修改行人点位信息Point{x,y,z},航向角phi"
		};
	};

	// --------- 非机动车部分 ---------

	// 获取非机动车ID列表
	rpc	GetNMVIdList(GetNMVIdListReq)returns(GetNMVIdListRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/nmv/id_list/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "获取非机动车ID列表"
		};
	};
	// 获取非机动车基础信息
	rpc GetNMVBaseInfo(GetNMVBaseInfoReq)returns(GetNMVBaseInfoRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/nmv/base_info/get"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据非机动车ID列表，获取非机动车基础信息"
		};
	};
	// 修改非机动车点位信息{x,y,z}, 航向角Phi
	rpc SetNMVPosition(SetNMVPositionReq) returns (SetNMVPositionRes) {
		option (google.api.http) = {
			post : "/cosim/v2/simulation/nmv/position/set"
			body : "*"
		};
		option (openapi.v3.operation) = {
			tags : "V2.0.0"
			summary : "根据非机动车ID，修改非机动车点位信息Point{x,y,z},航向角phi"
		};
	};
}



// --------- 仿真器部分 ---------

// 初始化新仿真
message InitReq {
	// 任务ID
	uint64 task_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 剧本ID
	uint64 record_id = 2[ (google.api.field_behavior) = REQUIRED ];
}

message InitRes {
	// 仿真ID
	string simulation_id = 1;
	string addr = 2;
}

// 执行仿真
message StepReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED];
}
message StepRes {
	// 0:运行中;1001:结束;1002;碰撞
	int32 code = 1;
	string message = 2;
}

// 停止仿真
message StopReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED];
}
message StopRes {}


// 重置当前仿真器, 根据scenario配置信息重置仿真
message ResetReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED];
}
message ResetRes {}



// --------- 地图部分 ---------

// 获取交通信号灯当前阶段信息
message GetCurrentStageReq{
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// movementId
	string junction_id = 2[ (google.api.field_behavior) = REQUIRED ];
}
message GetCurrentStageRes{
	repeated string movement_ids  =1 ; // 当前阶段包含的绿灯流向
	int32 countdown = 2;  // 倒计时(s)
}

// 获取相位对应信号灯灯色逆袭
message GetMovementSignalReq{
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// movementId
	string movement_id = 2[ (google.api.field_behavior) = REQUIRED ];
}
message GetMovementSignalRes{
	int32 current_signal  =1 ; // 当前灯色
	int32 countdown = 2;  // 倒计时(s)
}


message GetSignalPlanReq{
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	string junction_id = 2[ (google.api.field_behavior) = REQUIRED ];
}
message GetSignalPlanRes{
	string junction_id = 1;
	int32 cycle = 2;
	int32 offset = 3;
	repeated Stage stages = 4;

	message Stage {
		repeated string movement_ids = 1;
		int32 duration = 2; // 时长(s)
	}
}


message GetMovementListReq{
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	string junction_id = 2[ (google.api.field_behavior) = REQUIRED ];
}
message GetMovementListRes{
	// movement 列表
	repeated risenlighten.lasvsim.process_task.api.cosim.v2.Movement list = 1;
}


message NextStageReq{
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	string junction_id = 2[ (google.api.field_behavior) = REQUIRED ];
}
message NextStageRes{}


// --------- 车辆部分 ---------

message GetVehicleIdListReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
}
message GetVehicleIdListRes {
	// 车辆ID列表
	repeated string list = 1;
}


message GetTestVehicleIdListReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
}
message GetTestVehicleIdListRes {
	// 车辆ID列表
	repeated string list = 1;
}

message GetVehicleBaseInfoReq{
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 车辆ID列表 - 最多支持100个ID
	repeated string id_list = 2[(validate.rules).repeated.max_items = 100];
}
message GetVehicleBaseInfoRes{
	// 车辆ID与车辆基础信息映射表
	map<string, VehicleBaseInfo> info_dict = 1;

	message VehicleBaseInfo {
		// 物体基础描述信息
		risenlighten.lasvsim.process_task.api.cosim.v2.ObjBaseInfo base_info = 1;
		// 动力学基础描述信息(暂不支持)
		risenlighten.lasvsim.process_task.api.cosim.v2.DynamicInfo dynamic_info = 2;
	}
}


message GetVehiclePositionReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 车辆ID列表 - 最多支持100个ID
	repeated string id_list = 2[(validate.rules).repeated.max_items = 100];
}
message GetVehiclePositionRes {
	// 车辆ID与车辆位置信息映射表
	map<string, risenlighten.lasvsim.process_task.api.cosim.v2.Position> position_dict = 1;
}


message GetVehicleMovingInfoReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 车辆ID列表 - 最多支持100个ID
	repeated string id_list = 2[(validate.rules).repeated.max_items = 100];
}
message GetVehicleMovingInfoRes {
	// 车辆ID与车辆移动信息映射表
	map<string, risenlighten.lasvsim.process_task.api.cosim.v2.ObjMovingInfo> moving_info_dict = 1;
}


message GetVehicleControlInfoReq {
	// 仿真ID
  string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
  // 车辆ID列表 - 最多支持100个ID
  repeated string id_list = 2[(validate.rules).repeated.max_items = 100];
}
message GetVehicleControlInfoRes {
	// 车辆ID与车辆控制参数映射表
	map<string, risenlighten.lasvsim.process_task.api.cosim.v2.ControlInfo> control_info_dict = 1;
}


message GetVehiclePerceptionInfoReq {
	// 仿真ID
  string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
  // 车辆ID
	string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];;
}
message GetVehiclePerceptionInfoRes {
	repeated PerceptionObj list = 1;
	// 感知目标对象结构
	message PerceptionObj {
		string obj_id = 1;
		risenlighten.lasvsim.process_task.api.cosim.v2.ObjBaseInfo base_info = 2;
		risenlighten.lasvsim.process_task.api.cosim.v2.ObjMovingInfo moving_info = 3;
		risenlighten.lasvsim.process_task.api.cosim.v2.Position position = 4;
	}
}


message GetVehicleReferenceLinesReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 车辆ID
	string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];
}
message GetVehicleReferenceLinesRes {
	repeated risenlighten.lasvsim.process_task.api.cosim.v2.ReferenceLine reference_lines = 1;
}


message GetVehiclePlanningInfoReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 车辆ID
	string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];
}
message GetVehiclePlanningInfoRes {
	repeated Point planning_path = 1;
}


message GetVehicleNavigationInfoReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 车辆ID
	string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];;
}
message GetVehicleNavigationInfoRes {
	// 暂不支持route_nav以及lane_nav
	risenlighten.lasvsim.process_task.api.cosim.v2.NavigationInfo navigation_info = 1;
}


message SetVehiclePlanningInfoReq {
	// 仿真ID
  string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
  // 车辆ID
  string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];
  // 轨迹点
  repeated Point planning_path = 3;
}
message SetVehiclePlanningInfoRes {}


message SetVehicleControlInfoReq {
	// 仿真ID
  string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
  // 车辆ID
  string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];
  // 方向盘转角, 如果为空则不生效
	optional double ste_wheel = 3;
	// 纵向加速度, 如果为空则不生效
	optional double lon_acc = 4;
}
message SetVehicleControlInfoRes {}


message SetVehiclePositionReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 车辆ID
	string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];
	// 设置{x,y,z}，如果为空则不生效
	optional Point point = 3;
	// 设置航向角, 如果为空则不生效
	optional double phi = 4;
}
message SetVehiclePositionRes {}


message SetVehicleMovingInfoReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 车辆ID
	string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];
	// 纵向速度速度, 如果为空则不生效
	optional double u = 3;
	// 横向速度, 如果为空则不生效
	optional double v = 4;
	// 角速度, 如果为空则不生效
	optional double w = 5;
	// 纵向加速度, 如果为空则不生效
	optional double u_acc = 6;
	// 横向加速度, 如果为空则不生效
	optional double v_acc = 7;
	// 角加速度, 如果为空则不生效
	optional double w_acc = 8;
}
message SetVehicleMovingInfoRes {}


message SetVehicleBaseInfoReq {
	// 仿真ID
  string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
  // 车辆ID
  string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];
	// 基础信息
	optional risenlighten.lasvsim.process_task.api.cosim.v2.ObjBaseInfo base_info = 3;
	// 动力学基础信息(暂不支持)
	optional risenlighten.lasvsim.process_task.api.cosim.v2.DynamicInfo dynamic_info = 4;
}
message SetVehicleBaseInfoRes {}


message SetVehicleDestinationReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 车辆ID
	string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];
	// 终点位置信息
	optional risenlighten.lasvsim.process_task.api.cosim.v2.Point destination = 3;
}
message SetVehicleDestinationRes {}

// 暂不支持
message SetVehicleRouteNavReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 车辆ID
	string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];
	// 路段导航
	repeated string route_nav = 3;
}
message SetVehicleRouteNavRes {}


message SetVehicleLinkNavReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 车辆ID
	string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];
	// 子路段导航
	repeated string link_nav = 3;
}
message SetVehicleLinkNavRes {}

// 暂不支持
message SetVehicleLaneNavReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 车辆ID
	string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];
	// 路段导航
	repeated risenlighten.lasvsim.process_task.api.cosim.v2.LaneNav lane_nav = 3;
}
message SetVehicleLaneNavRes {}

// TODO 缺少 车辆驾驶风格相关接口


// --------- 行人部分 ---------

message GetPedIdListReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
}
message GetPedIdListRes {
	repeated string list = 1;
}


message GetPedBaseInfoReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 行人ID列表 - 最多支持100个ID
	repeated string ped_id_list = 2[(validate.rules).repeated.max_items = 100];
}
message GetPedBaseInfoRes {
	// 行人基础信息
	map<string, risenlighten.lasvsim.process_task.api.cosim.v2.ObjBaseInfo> base_info_dict = 1;
}


message SetPedPositionReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 行人ID
	string ped_id = 2[ (google.api.field_behavior) = REQUIRED ];
	// 坐标{x,y,z}
	optional risenlighten.lasvsim.process_task.api.cosim.v2.Point point = 3;
	// 航向角
	optional double phi = 4;
}
message SetPedPositionRes {};


// --------- 非机动车部分 ---------

message GetNMVIdListReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
}
message GetNMVIdListRes {
	repeated string list = 1;
}


message GetNMVBaseInfoReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 非机动车ID列表 - 最多支持100个ID
	repeated string nmv_id_list = 2[(validate.rules).repeated.max_items = 100];
}
message GetNMVBaseInfoRes {
	// 非机动车基础信息
	map<string, risenlighten.lasvsim.process_task.api.cosim.v2.ObjBaseInfo> base_info_dict = 1;
}


message SetNMVPositionReq {
	// 仿真ID
	string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
	// 非机动车ID
	string nmv_id = 2[ (google.api.field_behavior) = REQUIRED ];
	// 坐标{x,y,z}
	optional risenlighten.lasvsim.process_task.api.cosim.v2.Point point = 3;
	// 航向角
	optional double phi = 4;
}
message SetNMVPositionRes {};