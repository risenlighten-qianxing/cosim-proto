syntax = "proto3";

package risenlighten.lasvsim.process_task.api.cosim.v2;

option go_package = "git.risenlighten.com/lasvsim/process_task/api/cosim/v2;cosimv2";
option java_multiple_files = true;
option java_package = "proto.risenlighten.lasvsim.process_task.api.cosim.v2";


message Point {
	double x = 1;
	double y = 2;
	double z = 3;
}

message Header{
	// 东、西、南、北的边界值，（偏置前数据）
	double north = 1;
	double south = 2;
	double east = 3;
	double west = 4;

	// 地图中心点位，（偏置前点位）
	Point center_point = 5;
	// 地图解析版本
	string version = 6;
	// 时区
	double zone = 7;
	// 是否使用偏置
	bool use_bias = 8;
}

message Position {
	Point point = 1;
	double phi = 2;
	string lane_id = 3;
	string link_id = 4;
	string junction_id = 5;
	string segment_id = 6;
	double dis_to_lane_end = 7;
	// 1 - 地图外 TODO 还有哪些选项
	int32 position_type = 8;
}

message DirectionPoint {
	// double精度点坐标
	Point point = 1;
	// 俯仰角
	double pitching = 2;
	// 朝向角
	double heading = 3;
	// 翻滚角
	double rolling = 4;
}

message Turn {
	// 带有3维朝向的点坐标
	DirectionPoint direction_point = 1;
	/*
	掉头、左转、直行和右转(TLSR)的组合(0否|1是)
		1000 掉头
		0010 直行
		0100 左转
		0001 右转
		1100 左转和掉头
		0011 直行和右转
		0110 左转和直行
	*/
	string turn = 2;
	// 转向与linkId的映射
	map<string, string> turn_mapping = 3;
}
message Speed {
	// 车道距离起始点偏离距离
	double s = 1;
	// 限速路段长度
	double length = 2;

	// 速度值 为0时不限速
	double value = 1000;
	// 速度单位 目前只用到km/h
	string uint = 1001;
	// 限速源,预留字段,暂时未使用
	string source = 1002;
}

message LaneMark {
	repeated Point shape = 1000;
	repeated LaneMarkAttribution lane_mark_attrs = 1001;
}

message LaneMarkAttribution {
	// 车道线风格长度
	double length = 1;
	// 车道距离起始点偏离距离
	double s = 2;
	// 车道线右边界点位数组中的起始下标
	int32 start_index = 3;
	// 车道线右边界点位数组中的结束下标
	int32 end_index = 4;
	/*
	车道分界线样式
	    "solid": "实线",
    	"broken": "虚线",
    	"broken broken": "双虚线",
    	"solid solid": "双实线"
	*/
	string style = 1000;
	/*
	 车道线颜色
	    "white": "白色",
    	"yellow": "黄色"
	*/
	string color = 1001;
	// 车道线宽度,预留字段,暂时未使用
	double width = 1002;
}

message Junction{
	uint64 map_id = 1;
	string junction_id = 2;
	// 路口名称
	string name = 3;
	/*
	路口类型
	    "unknown": "未知类型",
    	"crossing": "十字路口",
   		"ring" : "环岛",
    	"rampin": "入匝道",
    	"rampout": "出匝道",
    	"deadend" : "断头路"
	*/
	string type = 4;
	// link id 数组
	repeated string link_ids = 5;
	// 路口封闭点位形状
	repeated Point shape = 7;
	// 交通灯信号控制组
	string traffic_light_id = 8;

	repeated string in_segment_ids = 9;
	repeated string out_segment_ids = 10;
}

message Segment{
	uint64 map_id = 1;
	string segment_id = 2;
	// 道路名称
	string name = 3;
	// 有序的 link id数组
	repeated string ordered_link_ids = 4;
	// 起始路口id
	string start_junction_id = 6;
	// 结束路口id
	string end_junction_id = 7;
	// 长度
	double length = 8;
	// 道路方向角度
	double heading = 9;
	// 交通灯杆id
	string traffic_light_pole_id = 10;

	// 距离所在route起始/终点的距离
	double s_offset = 11;
}

message Link{
	uint64 map_id = 1;
	string link_id = 2;
	// 相对 link
	string pair_id = 3;
	// link宽度是否固定，为0时不固定，不为0时固定为该值
	double width = 4;
	// 有序的车道引用数组
	repeated string ordered_lane_ids = 5;
	// 车道数量
	int32 lane_num = 7;
	// 起始位置
	Point start_point = 8;
	// 结束位置
	Point end_point = 9;
	// 暂时无用字段
	double gradient = 10;
	// 所属 segment
	string segment_id = 11;
	// link 长度
	double length = 12;
	/*
	link类型
	   "segment": "主路子路段",
     "pre_turn_right": "提前右转子路段",
     "pre_u_turn": "提前掉头子路段",
     "ring": "环岛子路段"
     "wait_area": "左转待行区"
	*/
	string type = 13;
	// link 方向角度
	double heading = 14;
	// link 顺序
	int32 link_order = 15;
	// link 左边界
	repeated Point left_boundary = 16;
	// link 右边界
	repeated Point right_boundary = 17;

	// 道路类型,预留字段,暂时未用
	string road_type = 18;

	// 距离所在segment起始点偏置
	double s_offset = 19;
}

message Lane{
	uint64 map_id = 1;
	string lane_id = 2;
	/*
	车道类型
		  "unknown": "未知类型",
    	"driving": "行驶车道",
    	"biking": "自行车道",
    	"sidewalk": "人行道",
    	"border": "边界",
    	"busing": "公交车道"
	*/
	string type = 3;
	// 车道偏移
	int32 lane_offset = 4;
	// 车道所属 link
	string link_id = 5;
	// 车道转向标志
	Turn turn = 6;
	// 车道中的多段限速属性
	repeated Speed speeds = 7;
	// 停车线id
	string stopline_id = 8;
	// 车道宽度
	double width = 9;
	// 车道中心线
	repeated Point center_line = 10;
	// 车道关联 link
	repeated string connect_link_ids = 11;

	// 左车道线
	LaneMark left_lane_mark = 12;
	// 右车道线
	LaneMark right_lane_mark = 13;
  // 上游linkID列表
	repeated string upstream_link_ids = 14;
  // 下游linkID列表
	repeated string downstream_link_ids = 15;
	// 车道拆分点处 s构成的数组(没有起终点)
	repeated double cut_s_list = 16;

	double length = 17;
}

message Stopline {
	uint64 map_id = 1;
	string stopline_id = 2;
	//点位 2点连线
	repeated Point shape = 3;
}

message TrafficSign {
	uint64 map_id = 1;
	string traffic_sign_id = 2;
	/*
	交通标识类型
	    "traffic_lane_markings": "路牌",
    	"speed_limit":     "限速",
    	"traffic_light_pole":    "信号灯杆"
	*/
	string type = 3;
	DirectionPoint direction_point = 4;
}

message TrafficLight{
	uint64 map_id = 1;
	// 交通灯 schedule id
	string traffic_light_id = 2;
	// 路口 id
	string junction_id = 3;

	// 信号灯周期
	int32 cycle = 7;
	// 信号灯偏移
	int32 offset = 8;

	message MovementSignal {
		// movement id
		string movement_id = 1;
		// 交通灯杆 id
		string traffic_light_pole_id = 2;
		// 绿灯信号
		message SignalOfGreen {
			// 绿灯开始时间
			int32 green_start = 1;
			// 绿灯持续时间
			int32 green_duration = 2;
			// 黄灯时间
			int32 yellow = 3;
			// 车辆清空红灯等待时间
			int32 red_clean = 4;
		}
		// 绿灯信号组
		repeated SignalOfGreen signal_of_green = 100;
	}
	// 全黄
	bool is_yellow = 9;
	// 流向信号组
	map<string,MovementSignal>  movement_signals = 99;
}

message Movement {
	uint64 map_id = 1;

	string movement_id = 2;
	// 入路口link id
	string upstream_link_id = 3;
	// 出路口link id
	string downstream_link_id = 4;

	// junction id
	string junction_id = 5;
	/*
	流向
	    "straight": "直行",
    	"left":     "左转",
    	"right":    "右转",
    	"turn":     "掉头"
	*/
	string flow_direction = 6;
}

message Connection {
	uint64 map_id = 1;

	string connection_id = 2;
	// 所属路口 id
	string junction_id = 3;
	// 所属 lane id
	string movement_id = 4;
	// 入路口 lane id
	string upstream_lane_id = 5;
	// 出路口 lane id
	string downstream_lane_id = 6;
	// 车辆行驶路径
	repeated Point path = 7;
	// 流向
	string flow_direction = 8;

	// 入路口 link id
	string upstream_link_id = 9;
	// 出路口 link id
	string downstream_link_id = 10;
	/*
	类型
		"node": "路口的"
		"edge": "路段segment内的"
	*/
	string type = 11;
}

message Crosswalk {
	uint64 map_id = 1;
	string crosswalk_id = 2;
	// 斑马线方向
	double heading = 3;
	// 点位 封闭多点构成
	repeated Point shape = 1000;
}

message HdMap {
	Header header = 1;
	// 路口
	repeated Junction junctions = 2;
	// 路段
	repeated Segment segments = 3;
	// 子路段
	repeated Link links = 4;
	// 车道
	repeated Lane lanes = 5;
	// 行人道
	repeated Crosswalk crosswalks = 1000;
	// 停车线
	repeated Stopline stoplines = 1001;
	// 交通信号灯
	repeated TrafficLight traffic_lights = 1002;
	// 交通标志牌
	repeated TrafficSign traffic_signs = 1003;
	// 路口流向
	repeated Movement movements = 1004;
	// 连接
	repeated Connection connections = 1005;
}



// -------- 仿真器内部数据通用结构 定义 --------

// 物体基础描述
message ObjBaseInfo {
	// 宽(m)
	double width = 1;
	// 高(m)
	double height = 2;
	// 长(m)
	double length = 3;
	// 重量(kg)
	double weight = 4;
}

// 车辆动力学基础参数
message DynamicInfo {
	// 前轮转弯刚度[N/rad]
	double front_wheel_stiffness = 1;
	// 后轮转弯刚度[N/rad]
	double rear_wheel_stiffness = 2;
	// 前轴到重心距离[m]
	double front_axle_to_center = 3;
	// 后轴到重心距离[m]
	double rear_axle_to_center = 4;
	// 重心处的极惯性矩[kg*m^2]
	double yaw_moment_of_inertia = 5;
}

// 物体移动属性
message ObjMovingInfo {
	// 纵向速度[m/s]
	double u = 2;
	// 纵向加速度[m/s^2]
	double u_acc = 3;
	// 横向速度[m/s]
	double v = 4;
	// 横向加速度[m/s^2]
	double v_acc = 5;
	// 角速度[m/s]
	double w = 6;
	// 角加速度[m/s^2]
	double w_acc = 7;
}

message ControlInfo {
	// 方向盘转角[逆时针为正]
	double ste_wheel = 1;
	// 纵向加速度[m/s^2]
	double lon_acc = 2;
	// 左前轮扭矩[N*m]
	double fl_torque = 3;
	// 右前轮扭矩[N*m]
	double fr_torque = 4;
	// 左后轮扭矩[N*m]
	double rl_torque = 5;
	// 右后轮扭矩[N*m]
	double rr_torque = 6;
}

message ReferenceLine {
	repeated string lane_ids = 1;
	// "lane"和"connection"
	repeated string lane_types = 2;
	repeated Point points = 3;
	repeated int32 lane_idxes = 4;
	// 是否逆行
	bool opposite = 5;
}

message NavigationInfo {
	// 路段导航
	repeated string route_nav  = 1;
	// 子路段导航
	repeated string link_nav = 2;
	// 车道导航
	repeated LaneNav lane_nav = 3;
	// 终点
	Position destination = 4;
}

// 车道导航
message LaneNav {
	map<int32, string> nav = 1;
}